{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\BJMRO\\\\Desktop\\\\next js app\\\\my-first-next-app\\\\components\\\\MyLayout.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* In our app, we'll use a common style across various pages. For this purpose, we can create a common Layout component and use it for each of our pages. Here's an example: \r\n\r\nSince Next.js is used to create server-rendered pages, adding a link using a normal <a> tag would cause a link that would be navigated to via the server. \r\nThis is obviously not always necessary. \r\nTo support client-side navigation (this takes place in the browser, without making a request to the server) we use Next.js’ Link API.*/\nimport Link from 'next/link';\n/*You can use this built-in component to append elements to the <head> element of the page. More info here: https://github.com/zeit/next.js/#populating-head \r\nNotice that we add the link for the stylesheet for using React-Bootstrap components to the <Head>. */\n\nimport Head from 'next/head';\nimport Header from './Header';\nvar layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: '1px solid #DDD'\n};\n/* Notice in the example below that we pass children and title as props to the Layout components.\r\nIf you remove {children}, the Layout cannot render the content we put inside the Layout element. \r\nHave a look at ./pages/index.js to see where we pass props through to this Layout Component. */\n\nvar Layout = function Layout(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 2\n    }\n  }, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n    integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n    crossorigin: \"anonymous\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    style: layoutStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }\n  }), props.children));\n};\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/Users/BJMRO/Desktop/next js app/my-first-next-app/components/MyLayout.js"],"names":["Link","Head","Header","layoutStyle","margin","padding","border","Layout","props","children"],"mappings":";;;;;;AAAA;;;;;AAKA,OAAOA,IAAP,MAAiB,WAAjB;AACA;;;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,EADQ;AAEhBC,EAAAA,OAAO,EAAE,EAFO;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAApB;AAMA;;;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,SACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AACC,IAAA,GAAG,EAAC,YADL;AAEC,IAAA,IAAI,EAAC,uEAFN;AAGC,IAAA,SAAS,EAAC,yEAHX;AAIC,IAAA,WAAW,EAAC,WAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADE,EASA;AAAK,IAAA,KAAK,EAAEL,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGK,KAAK,CAACC,QAFT,CATA,CADY;AAAA,CAAf;;KAAMF,M;AAiBN,eAAeA,MAAf","sourcesContent":["/* In our app, we'll use a common style across various pages. For this purpose, we can create a common Layout component and use it for each of our pages. Here's an example: \r\n\r\nSince Next.js is used to create server-rendered pages, adding a link using a normal <a> tag would cause a link that would be navigated to via the server. \r\nThis is obviously not always necessary. \r\nTo support client-side navigation (this takes place in the browser, without making a request to the server) we use Next.js’ Link API.*/\r\nimport Link from 'next/link'\r\n/*You can use this built-in component to append elements to the <head> element of the page. More info here: https://github.com/zeit/next.js/#populating-head \r\nNotice that we add the link for the stylesheet for using React-Bootstrap components to the <Head>. */\r\nimport Head from 'next/head'\r\nimport Header from './Header'\r\n\r\nconst layoutStyle = {\r\n    margin: 20,\r\n    padding: 20,\r\n    border: '1px solid #DDD'\r\n}\r\n\r\n/* Notice in the example below that we pass children and title as props to the Layout components.\r\nIf you remove {children}, the Layout cannot render the content we put inside the Layout element. \r\nHave a look at ./pages/index.js to see where we pass props through to this Layout Component. */\r\nconst Layout = (props) => (\r\n   <div>\r\n\t<Head>\r\n\t   <link\r\n  \t\t\trel=\"stylesheet\"\r\n  \t\t\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n  \t\t\tintegrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n  \t\t\tcrossorigin=\"anonymous\"\r\n\t\t/>\r\n\t</Head>\r\n  \t<div style={layoutStyle}>\r\n    \t<Header />\r\n    \t{props.children}\r\n  \t</div>\r\n  </div>\r\n)\r\n\r\nexport default Layout\r\n"]},"metadata":{},"sourceType":"module"}